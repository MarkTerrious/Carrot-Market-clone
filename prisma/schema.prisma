generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  username      String     @unique
  email         String?    @unique
  password      String?
  phone         String?    @unique
  github_id     String?    @unique
  avatar        String?
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  comments      Comment[]
  like          Like[]
  posts         Post[]
  products      Product[]
  tokens        SMSToken[]
  chat_room     ChatRoom[]
  messages      Message[]
  liveStream    LiveStream[]
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userId     Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id          Int      @id @default(autoincrement())
  title       String
  price       Float
  photo       String
  description String
  userId      Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  views       Int       @default(0)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  userId      Int
  comments    Comment[]
  likes       Like[]
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Comment {
  id         Int      @id @default(autoincrement())
  payload    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  postId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  userId     Int
  postId     Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id( name: "likeId", [userId, postId])
}


model ChatRoom {
  id          String    @id @default(cuid())
  users       User[]

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  message     Message[]
}

model Message {
  id            Int       @id @default(autoincrement())
  payload       String

  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  room          ChatRoom  @relation(fields: [chatRoomId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
  chatRoomId    String
  userId        Int  
}

model LiveStream {
  id            Int       @id @default(autoincrement())
  title         String
  stream_key    String
  stream_id     String        

  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt

  user          User      @relation(fields: [userId], references: [id])
  userId        Int
}